using ExitGames.Client.Photon;
using PeakCheat.Types;
using Photon.Pun;
using Photon.Realtime;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace PeakCheat.Utilities
{
    public static class Exploits
    {
        public static void ForceSetName(CheatPlayer player, string name) => ForceSetProps(player, name, player.PhotonPlayer?.CustomProperties ?? null);
        public static void ForceSetProps(CheatPlayer player, Hashtable props) => ForceSetProps(player, null, props ?? null);
        public static void ForceSetProps(CheatPlayer player, string? name, Hashtable? props)
        {
            int actor = player.PhotonPlayer?.ActorNumber?? 0;

            if (actor == 0)
            {
                LogUtil.Log(false, "Properties cant be set from null actor");
                return;
            }

            if (props == null)
            {
                LogUtil.Log(false, "Properties cant be set to null props");
                return;
            }
            
            ForceSetProps(actor, name?? (PhotonNetwork.TryGetPlayer(actor, out var p)? p.NickName: "null"), props);
        }
        public static void ForceSetName(int player, string name) => ForceSetProps(player, name, new Hashtable());
        public static void ForceSetProps(int player, Hashtable props) => ForceSetProps(player, null, props ?? null);
        public static void ForceSetProps(int actor, string? name, Hashtable? props)
        {
            var hash = new Hashtable();

            hash.Merge(props?? new Hashtable());
            hash[byte.MaxValue] = name?? "null";

            PhotonNetwork.NetworkingClient.LoadBalancingPeer.SendOperation(252, new Dictionary<byte, object>()
            {
                {251, hash },
                {254, actor},
                {250, true}
            }, SendOptions.SendReliable);
        }
        public static void ForceSerialize(this PhotonView view, object[] streamData, RaiseEventOptions options)
        {
            if (view == null) return;
            if (streamData == null) return;

            options ??= new RaiseEventOptions()
            {
                Receivers = ReceiverGroup.All
            };

            PhotonNetwork.NetworkingClient.OpRaiseEvent(206, new object[]
            {
                PhotonNetwork.ServerTimestamp,
                Convert.ToByte(view.Prefix),
                new object[]
                {
                    view.ViewID,
                    false,
                    new int[0]
                }.Concat(streamData).ToArray()
            }, options, SendOptions.SendReliable);
        }
        public static bool TryGetPrefab<T>(out GameObject? prefab) where T : Component => Resources.FindObjectsOfTypeAll<GameObject>().Where(I => !I.name.Contains("(Clone)") && I.TryGetComponent<PhotonView>(out _)).Any(G => G?.TryGetComponent<T>(out _) ?? false, out prefab);
    }
}